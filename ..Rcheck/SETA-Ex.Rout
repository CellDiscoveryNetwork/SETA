
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: aarch64-apple-darwin20

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "SETA"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('SETA')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("setaALR")
> ### * setaALR
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: setaALR
> ### Title: Additive Log-Ratio (ALR) Transform
> ### Aliases: setaALR
> 
> ### ** Examples
> 
> # Example with 2 samples and 2 taxa:
> mat <- matrix(c(1,2,4,8), nrow = 2, byrow = TRUE)
> colnames(mat) <- c("TaxonA", "TaxonB")
> # Using TaxonA as the reference.
> out <- setaALR(mat, ref = "TaxonA", pseudocount = 0)
> out$counts
        TaxonB
[1,] 0.6931472
[2,] 0.6931472
> 
> 
> 
> 
> cleanEx()
> nameEx("setaCLR")
> ### * setaCLR
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: setaCLR
> ### Title: Centered Log-Ratio (CLR) Transform
> ### Aliases: setaCLR
> 
> ### ** Examples
> 
> # Example matrix with 2 samples and 2 taxa:
> mat <- matrix(c(1,2,4,8), nrow = 2, byrow = TRUE)
> colnames(mat) <- c("Taxon1", "Taxon2")
> out <- setaCLR(mat, pseudocount = 0)
> out$counts
         Taxon1    Taxon2
[1,] -0.3465736 0.3465736
[2,] -0.3465736 0.3465736
> 
> 
> 
> 
> cleanEx()
> nameEx("setaCounts")
> ### * setaCounts
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: setaCounts
> ### Title: Extract Taxonomic Counts from Various Single Cell Objects
> ### Aliases: setaCounts
> 
> ### ** Examples
> 
> 
> # For a data.frame with custom column names:
> df <- data.frame(
+   barcode = paste0("cell", 1:10),
+   cellType = sample(c("Tcell", "Bcell"), 10, TRUE),
+   sampleID = sample(c("sample1","sample2"), 10, TRUE)
+ )
> cmat <- setaCounts(df, cell_type_col = "cellType", sample_col = "sampleID", bc_col = "barcode")
> print(cmat)
         
          Bcell Tcell
  sample1     3     3
  sample2     1     3
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("setaILR")
> ### * setaILR
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: setaILR
> ### Title: Isometric Log-Ratio (ILR) Transform
> ### Aliases: setaILR
> 
> ### ** Examples
> 
> # Example matrix: rows are samples, columns are cell types.
> mat <- matrix(c(1, 2, 4, 8), nrow = 2, byrow = TRUE)
> colnames(mat) <- c("A", "B")
> # ILR transformation reduces the dimension by 1.
> out <- setaILR(mat, boxcox_p = 0, pseudocount = 1)
> out$counts
          [,1]
[1,] 0.2867071
[2,] 0.4156279
> 
> 
> 
> 
> cleanEx()
> nameEx("setaLatent")
> ### * setaLatent
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: setaLatent
> ### Title: Compute a Latent Space from Transformed Counts
> ### Aliases: setaLatent
> 
> ### ** Examples
> 
> mat <- matrix(rpois(20, lambda=5), nrow=4)  # small 4x5 matrix
> colnames(mat) <- paste0("C", 1:5)
> clr_out <- setaCLR(mat)
> latent_pca <- setaLatent(clr_out, method="PCA", dims=2)
> latent_pca$latentSpace
          PC1          PC2
1  0.74202954 -0.217243665
2 -0.58133235 -0.353636177
3 -0.07773674  0.570765665
4 -0.08296045  0.000114177
> 
> 
> 
> 
> cleanEx()
> nameEx("setaLogCPM")
> ### * setaLogCPM
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: setaLogCPM
> ### Title: log2(CPM) Transform
> ### Aliases: setaLogCPM
> 
> ### ** Examples
> 
> mat <- matrix(c(10, 20, 100, 200), nrow = 2, byrow = TRUE)
> out <- setaLogCPM(mat, pseudocount = 1)
> out$counts
         [,1]     [,2]
[1,] 18.43680 19.36969
[2,] 18.35616 19.34900
> 
> 
> 
> 
> cleanEx()
> nameEx("setaMetadata")
> ### * setaMetadata
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: setaMetadata
> ### Title: Extract Sample-Level Metadata from Various Objects
> ### Aliases: setaMetadata
> 
> ### ** Examples
> 
> # Using a Seurat object
> 
> 
> 
> cleanEx()
> nameEx("setaPercent")
> ### * setaPercent
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: setaPercent
> ### Title: Percentage Transform
> ### Aliases: setaPercent
> 
> ### ** Examples
> 
> mat <- matrix(c(1,2,4,8), nrow = 2, byrow = TRUE)
> out <- setaPercent(mat)
> out$counts
         [,1]     [,2]
[1,] 33.33333 66.66667
[2,] 33.33333 66.66667
> 
> 
> 
> 
> cleanEx()
> nameEx("setaTransform")
> ### * setaTransform
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: setaTransform
> ### Title: Wrapper for Compositional Transforms
> ### Aliases: setaTransform
> 
> ### ** Examples
> 
> mat <- matrix(c(1,2,4,8), nrow = 2, byrow = TRUE)
> # Apply CLR transform:
> setaTransform(mat, method = "CLR", pseudocount = 1)
$method
[1] "CLR"

$counts
           [,1]      [,2]
[1,] -0.2027326 0.2027326
[2,] -0.2938933 0.2938933

> # Apply percent transform:
> setaTransform(mat, method = "percent")
$method
[1] "percent"

$counts
         [,1]     [,2]
[1,] 33.33333 66.66667
[2,] 33.33333 66.66667

> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.035 0.003 0.038 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
